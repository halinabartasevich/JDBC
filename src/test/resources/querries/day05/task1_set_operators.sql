SELECT * FROM EMPLOYEES;

-- CONSTRANCE: PROMARY KEY, UNIQOE, NOT NULL, REFERENCES

CREATE TABLE  DEVELOPERS (
    ID_NUMBER INTEGER PRIMARY KEY,
    NAME VARCHAR(20),
    SALARY NUMBER
);

SELECT * FROM DEVELOPERS;

CREATE TABLE  TESTERS (
    ID_NUMBER INTEGER PRIMARY KEY,
    NAME VARCHAR(20),
    SALARY NUMBER
);

SELECT * FROM TESTERS;

--INSERT (INJECT/CREATE/PUT) SOME DATA INTO THOSE TABLES
INSERT INTO  DEVELOPERS VALUES  (1, 'John', 10000);
INSERT INTO  DEVELOPERS VALUES  (2, 'Jane', 11000);
INSERT INTO  DEVELOPERS VALUES  (3, 'Jimmy', 12000);
INSERT INTO  DEVELOPERS VALUES  (4, 'Chris', 13000);

-- UPDATE DEVELOPERS SET NAME = 'Chris' WHERE ID_NUMBER = 4;


INSERT INTO  TESTERS VALUES (1, 'John', 13000);
INSERT INTO  TESTERS VALUES (2, 'James', 14000);
INSERT INTO  TESTERS VALUES (3, 'Bond', 15000);

commit; -- to save it in DB table (DATA BASE TABLE)
select  * from DEVELOPERS;
SELECT  * FROM  TESTERS;

-- INION: combine the result of 2 or more SAME QUERIES and keeps all remowing duplicates (keeps 1 copy of the duplicate) / SORTS IT IN ASC ORDER
SELECT * FROM DEVELOPERS
UNION
SELECT * FROM TESTERS;

SELECT  NAME FROM DEVELOPERS
UNION
SELECT  NAME FROM TESTERS;

SELECT  SALARY FROM  DEVELOPERS
UNION
SELECT  SALARY FROM  TESTERS;


-- INION ALL: combine the result of 2 or more SAME QUERIES and keeps all NOT remowing ANY duplicates (keeps ALL copy of the duplicate) / DOES NOT SORT IT IN ASC ORDER
SELECT SALARY FROM DEVELOPERS
UNION ALL
SELECT  SALARY FROM TESTERS;

--THIS WILL BE FAIL / GIVES AN ERROR - DIFFERENT DATA TYPES
SELECT SALARY FROM  DEVELOPERS
UNION ALL
SELECT   NAME FROM TESTERS;


--THIS WILL BE FAIL / GIVES AN ERROR - THE NUMBER OF COLUMS IS NOT MATCH
SELECT ID_NUMBER, SALARY FROM  DEVELOPERS
UNION ALL
SELECT   ID_NUMBER FROM TESTERS;

--MINUS: REMOWES THE RESULT OF THE 2ND QUWER FROM THE 1ST WUERY
SELECT  * FROM  DEVELOPERS
MINUS
SELECT  * FROM  TESTERS;

SELECT  SALARY FROM  DEVELOPERS
MINUS
SELECT  SALARY FROM  TESTERS;


-- INTERSECT: COMBINES THE REULTS OF TWO OR MORE QUERIES AND KEEPS ONLY THE ONES THAT EXISTS IN BOTH QUERIES
SELECT SALARY FROM DEVELOPERS
INTERSECT
SELECT  SALARY FROM TESTERS;


/*
    UNION           -> combines, removes duplicates, sorts
    UNION ALL       -> combines, does not remove duplicates, does not sort
    MINUS           -> show records from query1 that are not present in query2
    INTERSECT       -> show common records from 2 queries
 */